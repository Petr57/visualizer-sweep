;#include <sweep.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x50
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_standby=0x40
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;
;__flash char Frame[]={0xf0,0x88,0x8c,0x88,0xf0,0x88,0x88,0xf0}; //symbol B //{0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};//{0x86,0x86,0xfe,0x86,0x86,0x86,0x7e,0x00}; //symbol A
;
;extern char next_symbol;
;
;char line_pointer=0;
;char dir=0;                 //0-up 1-down
;
;char enable_update=0;               //permission to update the acceleration data
;char enable_check=0;                //permission to processing acceleration data
;unsigned int last_inf_time=0;
;signed char last_value=0;
;int last_time,more_last_time;
;char dir_counter=1;  //0 - negative direction=1; 2 - positive direction=0;

	.DSEG
;
;unsigned int periods_arr[8];
;unsigned int period=7800;   //time of one swing
;
;void sweep_init()
; 0003 0015 {

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0003 0016     acc_init();
;PCODE: $0000000C VOL: 0
; 0003 0017     DDRB=0xff;              //set output portB
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0003 0018     set_periods();
;PCODE: $0000000F VOL: 0
; 0003 0019     TCCR0B |=(1<<CS02);     //set prescale 256 on TIMER0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0003 001A     TCCR1B |=(1<<CS12);     //set prescale 256 on TIMER1
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0003 001B     TIMSK |=(1<<OCIE1A)|(1<<OCIE1B)|(1<<TOIE1)|(1<<TOIE0);     //set enable Compare A/B Match interrupts on TIMER1 and Overflows
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0003 001C 
; 0003 001D     OCR0A=128;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0003 001E     OCR1A=TCNT1+period;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0003 001F     set_line();
;PCODE: $0000001F VOL: 0
; 0003 0020 }
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;
;void set_line()
; 0003 0023 {
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0003 0024     if(dir)
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0003 0025         FRAMEPORT=Frame[7-line_pointer];          //set output line
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0003 0026     else
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0003 0027         FRAMEPORT=Frame[line_pointer];
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0003 0028     OCR1B=TCNT1+periods_arr[line_pointer];      //set time for line
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0003 0029     if(line_pointer<7) line_pointer++;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0003 002A }
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;
;void set_periods()     //set periods of lines
; 0003 002D {
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0003 002E     periods_arr[0]=(period/(int)4-period/(int)50);      //23%
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0003 002F     periods_arr[1]=(period/(int)8-period/(int)50);      //10,5%
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0003 0030     periods_arr[2]=(period/(int)11-period/(int)200);    //8,6%
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0003 0031     periods_arr[3]=(period/(int)12-period/(int)300);    //8%
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0003 0032     periods_arr[4]=periods_arr[3];
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0003 0033     periods_arr[5]=periods_arr[2];
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0003 0034     periods_arr[6]=periods_arr[1];
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0003 0035     periods_arr[7]=period;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0003 0036 }
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;
;void set_new_swing()
; 0003 0039 {
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0003 003A     period=more_last_time-last_inf_time;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0003 003B     set_periods();
;PCODE: $00000088 VOL: 0
; 0003 003C     enable_check=0;
;PCODE: $00000089 VOL: 0
; 0003 003D     line_pointer=0;
;PCODE: $0000008A VOL: 0
; 0003 003E     TCNT1=more_last_time; //back to the past: set inf time
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0003 003F     last_inf_time=TCNT1;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0003 0040     OCR1A=TCNT1+period/2;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0003 0041     set_line();
;PCODE: $00000095 VOL: 0
; 0003 0042 }
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;
;int check_inf(signed char value)
; 0003 0045 {
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0003 0046     if((value>last_value)&&(dir_counter<2))     dir_counter++;  //value rising -> dir_counter++
;	value -> Y+0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0003 0047     if((value<last_value)&&(dir_counter>0))     dir_counter--;  //value falling -> dir_counter--
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0003 0048 
; 0003 0049     if(dir)
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0003 004A     {
; 0003 004B         if(dir_counter>1)
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0003 004C         {
; 0003 004D             dir=0;      //change direction
;PCODE: $000000BB VOL: 0
; 0003 004E             return 1;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0003 004F         }
; 0003 0050     }
;PCODE: $000000BF VOL: 0
; 0003 0051     else
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0003 0052     {
; 0003 0053         if(dir_counter<1)
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0003 0054         {
; 0003 0055             dir=1;      //change direction
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0003 0056             return 1;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0003 0057         }
; 0003 0058     }
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0003 0059     last_value=value;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0003 005A     more_last_time=last_time;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0003 005B     last_time=TCNT1;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0003 005C     return 0;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0003 005D }
;PCODE: $000000D5 VOL: 0
;
;void try_update()
; 0003 0060 {
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0003 0061     if(enable_update&&enable_check)
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0003 0062     {
; 0003 0063         enable_update=0;
;PCODE: $000000E0 VOL: 0
; 0003 0064         if(check_inf(get_Y()))
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0003 0065             set_new_swing();
;PCODE: $000000E6 VOL: 0
; 0003 0066     }
;PCODE: $000000E7 VOL: 0
; 0003 0067 }
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;
;interrupt [TIM1_COMPA] void period_overflow(void)
; 0003 006A {
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0003 006B     enable_check=1;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0003 006C }
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;
;interrupt [TIM1_COMPB] void line_overflow(void)
; 0003 006F {
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0003 0070     set_line();
;PCODE: $000000F4 VOL: 0
; 0003 0071 }
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;
;interrupt [TIM0_OVF] void next_value(void)        //~120 OVF per second
; 0003 0074 {
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0003 0075     enable_update=1;
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0003 0076 }
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;
;interrupt [TIM1_OVF] void next_sym(void)        //~0.5 OVF per second
; 0003 0079 {
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0003 007A     next_symbol=1;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0003 007B }
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
