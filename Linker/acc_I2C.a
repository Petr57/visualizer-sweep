;#include"acc_I2C.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x50
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_standby=0x40
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;
;
;void acc_init()
; 0001 0005 {

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0001 0006     ACCDDR |= (1<<ACCPOWER)|(1<<SCL)|(1<<SDA);   //SDA,SCL,POWER set out
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 0007     ACCPORT |= (1<<ACCPOWER)|(1<<SCL)|(1<<SDA);  //SDA,SCL,POWER set 1
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0001 0008 }
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;
;void send_start()
; 0001 000B {
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0001 000C     ACCDDR |= (1<<SDA);         //SDA set out
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0001 000D     ACCPORT |= (1<<SDA);        //SDA=1
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0001 000E     ACCPORT |= (1<<SCL);        //SCL=1
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0001 000F     ACCPORT &= ~(1<<SDA);       //SDA=0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0001 0010     delay_us(hold_time);
;PCODE: $0000001E VOL: 0
; 0001 0011 }
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;
;void repeat_start()
; 0001 0014 {
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0001 0015     ACCDDR |= (1<<SDA);         //SDA set out
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0001 0016     ACCPORT |= (1<<SDA);        //SDA=1
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0001 0017     ACCPORT |= (1<<SCL);        //SCL=1
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0001 0018     delay_us(clock_hight);
;PCODE: $00000029 VOL: 0
; 0001 0019     ACCPORT &= ~(1<<SDA);       //SDA=0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0001 001A     delay_us(hold_time);
;PCODE: $0000002C VOL: 0
; 0001 001B }
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;
;void send_byte(char message)
; 0001 001E {
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0001 001F     char i;
; 0001 0020     char mask=0b10000000;
; 0001 0021     ACCDDR |= (1<<SDA);         //SDA set out
;PCODE: $00000031 VOL: 0
;	message -> Y+2
;	i -> R17
;	mask -> R16
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0001 0022     ACCPORT &= ~(1<<SCL);       //SCL=0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0001 0023     delay_us(clock_low);
;PCODE: $00000038 VOL: 0
; 0001 0024     for(i=0;i<8;i++)
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0001 0025     {
; 0001 0026         if(message&mask)
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0001 0027             ACCPORT |= (1<<SDA); //SDA=1
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0001 0028         else
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0001 0029             ACCPORT &= ~(1<<SDA);//SDA=0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0001 002A         mask=mask>>1;       //enough time for setup
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0001 002B         //delay_us(setup_time);
; 0001 002C         ACCPORT |= (1<<SCL);    //SCL=1
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0001 002D         delay_us(clock_hight);
;PCODE: $00000053 VOL: 0
; 0001 002E         ACCPORT &= ~(1<<SCL);   //SCL=0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0001 002F         delay_us(hold_time);
;PCODE: $00000056 VOL: 0
; 0001 0030     }
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0001 0031 }
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;
;char get_byte()
; 0001 0034 {
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0001 0035     char i,temp=0x00;
; 0001 0036     ACCPORT &= ~(1<<SCL);       //SCL=0
;PCODE: $00000062 VOL: 0
;	i -> R17
;	temp -> R16
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0001 0037     ACCDDR &= ~(1<<SDA);        //SDA set in
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0001 0038     for(i=0;i<8;i++)
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0001 0039     {
; 0001 003A         ACCPORT |= (1<<SCL);        //SCL=1
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0001 003B         temp = temp<<1;
;PCODE: $00000074 VOL: 0
; 0001 003C         delay_us(setup_time);
;PCODE: $00000075 VOL: 0
; 0001 003D         temp |= ACCPIN&(1<<SDA);
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0001 003E         ACCPORT &= ~(1<<SCL);       //SCL=0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0001 003F         delay_us(hold_time);
;PCODE: $0000007C VOL: 0
; 0001 0040     }
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0001 0041     return temp;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0001 0042 }
;PCODE: $00000085 VOL: 0
;
;char get_sak()
; 0001 0045 {
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0001 0046     char temp;
; 0001 0047     ACCPORT &= ~(1<<SCL);       //SCL=0
;PCODE: $00000088 VOL: 0
;	temp -> R17
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0001 0048     ACCDDR &= ~(1<<SDA);        //SDA set in
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0001 0049     ACCPORT |= (1<<SDA);        //SDA=1  line supporter
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0001 004A     ACCPORT |= (1<<SCL);        //SCL=1
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0001 004B     delay_us(setup_time);
;PCODE: $00000091 VOL: 0
; 0001 004C     temp=ACCPIN&(1<<SDA);
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0001 004D     ACCPORT &= ~(1<<SCL);       //SCL=0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0001 004E     delay_us(hold_time);
;PCODE: $00000097 VOL: 0
; 0001 004F     return temp;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0001 0050 }
;PCODE: $0000009B VOL: 0
;
;void send_mak(char mode)
; 0001 0053 {
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0001 0054     ACCDDR |= (1<<SDA);         //SDA set out
;	mode -> Y+0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0001 0055     ACCPORT &= ~(1<<SCL);       //SCL=0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0001 0056         if(mode)
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0001 0057             ACCPORT |= (1<<SDA); //SDA=1
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0001 0058         else
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0001 0059             ACCPORT &= ~(1<<SDA);//SDA=0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0001 005A     delay_us(setup_time);
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0001 005B     ACCPORT |= (1<<SCL);    //SCL=1
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0001 005C     delay_us(clock_hight);
;PCODE: $000000AF VOL: 0
; 0001 005D     ACCPORT &= ~(1<<SCL);   //SCL=0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0001 005E     delay_us(hold_time);
;PCODE: $000000B2 VOL: 0
; 0001 005F }
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;
;void send_stop()
; 0001 0062 {
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0001 0063     ACCDDR |= (1<<SDA);         //SDA set out
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0001 0064     ACCPORT &= ~(1<<SDA);       //SDA=0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0001 0065     ACCPORT |= (1<<SCL);        //SCL=1
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0001 0066     delay_us(setup_time);
;PCODE: $000000BE VOL: 0
; 0001 0067     ACCPORT |= (1<<SDA);        //SDA=1
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0001 0068     delay_us(clock_hight);
;PCODE: $000000C1 VOL: 0
; 0001 0069 }
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
