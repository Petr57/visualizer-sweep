;#include <lis331dl.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x50
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_standby=0x40
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;
;char get_at_address(char reg_addr)
; 0002 0004 {

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0002 0005     char temp;
; 0002 0006     send_start();
;PCODE: $0000000C VOL: 0
;	reg_addr -> Y+1
;	temp -> R17
;PCODE: $0000000D VOL: 0
; 0002 0007     send_byte(address<<1);
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0002 0008     send_byte(reg_addr);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0002 0009     repeat_start();
;PCODE: $00000014 VOL: 0
; 0002 000A     send_byte((address<<1)+1);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0002 000B     temp=get_byte();
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0002 000C     send_mak(1);
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0002 000D     send_stop();
;PCODE: $0000001D VOL: 0
; 0002 000E     return temp;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0002 000F }
;PCODE: $00000023 VOL: 0
;
;void set_at_address(char reg_addr, char data)
; 0002 0012 {
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0002 0013     send_start();
;	reg_addr -> Y+1
;	data -> Y+0
;PCODE: $00000026 VOL: 0
; 0002 0014     send_byte(address<<1);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0002 0015     send_byte(reg_addr);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0002 0016     send_byte(data);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0002 0017     send_stop();
;PCODE: $00000030 VOL: 0
; 0002 0018 }
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;
;void acc_init()
; 0002 001B {
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0002 001C     I2C_init();
;PCODE: $00000036 VOL: 0
; 0002 001D     delay_ms(10);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0002 001E     set_at_address(CTRL_REG1,0b11100111); //set DR, PD, FS, Zen, Yen, Xen
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0002 001F }
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;
;signed char get_X()
; 0002 0022 {
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0002 0023     return get_at_address(OUT_X);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0002 0024 }
;PCODE: $00000047 VOL: 0
;signed char get_Y()
; 0002 0026 {
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0002 0027     return get_at_address(OUT_Y);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0002 0028 }
;PCODE: $0000004E VOL: 0
;/*
;signed char get_Z()
;{
;    return get_at_address(OUT_Z);
;}
;
;axis_values get_axis_values()
;{
;    axis_values temp;
;    temp.X=get_at_address(OUT_X);
;    temp.Y=get_at_address(OUT_Y);
;    temp.Z=get_at_address(OUT_Z);
;    return temp;
;}  */
