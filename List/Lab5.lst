
AVRASM ver. 2.1.30  H:\Мои документы\Прочие файлы\проекты AVR\visualizer-sweep\List\Lab5.asm Sat Jan 25 20:50:06 2014

H:\Мои документы\Прочие файлы\проекты AVR\visualizer-sweep\List\Lab5.asm(961): warning: Register r3 already defined by the .DEF directive
H:\Мои документы\Прочие файлы\проекты AVR\visualizer-sweep\List\Lab5.asm(962): warning: Register r2 already defined by the .DEF directive
H:\Мои документы\Прочие файлы\проекты AVR\visualizer-sweep\List\Lab5.asm(963): warning: Register r5 already defined by the .DEF directive
H:\Мои документы\Прочие файлы\проекты AVR\visualizer-sweep\List\Lab5.asm(964): warning: Register r4 already defined by the .DEF directive
H:\Мои документы\Прочие файлы\проекты AVR\visualizer-sweep\List\Lab5.asm(965): warning: Register r7 already defined by the .DEF directive
H:\Мои документы\Прочие файлы\проекты AVR\visualizer-sweep\List\Lab5.asm(966): warning: Register r8 already defined by the .DEF directive
H:\Мои документы\Прочие файлы\проекты AVR\visualizer-sweep\List\Lab5.asm(967): warning: Register r6 already defined by the .DEF directive
H:\Мои документы\Прочие файлы\проекты AVR\visualizer-sweep\List\Lab5.asm(968): warning: Register r10 already defined by the .DEF directive
H:\Мои документы\Прочие файлы\проекты AVR\visualizer-sweep\List\Lab5.asm(969): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATtiny2313
                 ;Program type             : Application
                 ;Clock frequency          : 8,000000 MHz
                 ;Memory model             : Tiny
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 32 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : No
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: Yes
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATtiny2313
                 	#pragma AVRPART MEMORY PROG_FLASH 2048
                 	#pragma AVRPART MEMORY EEPROM 128
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 223
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU WDTCR=0x21
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x13
                 	.EQU GPIOR1=0x14
                 	.EQU GPIOR2=0x15
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x00DF
                 	.EQU __DSTACK_SIZE=0x0020
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _next_symbol=R3
                 	.DEF _line_pointer=R2
                 	.DEF _dir=R5
                 	.DEF _enable_update=R4
                 	.DEF _enable_check=R7
                 	.DEF _last_inf_time=R8
                 	.DEF _last_value=R6
                 	.DEF _last_time=R10
                 	.DEF _more_last_time=R12
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION VALUES
                 	.EQU __GPIOR0_INIT=0x00
                 	.EQU __GPIOR1_INIT=0x00
                 	.EQU __GPIOR2_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c02a      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 c1ca      	RJMP _period_overflow
000005 c1ef      	RJMP _next_sym
000006 c1e9      	RJMP _next_value
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c c1c7      	RJMP _line_overflow
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 _Frame:
000013 88f0
000014 888c
000015 88f0
000016 f088      	.DB  0xF0,0x88,0x8C,0x88,0xF0,0x88,0x88,0xF0
                 
                 _0x7:
H:\Мои документы\Прочие файлы\проекты AVR\visualizer-sweep\List\Lab5.asm(1007): warning: .cseg .db misalignment - padding zero byte
000017 0000      	.DB  0x0
                 _0x60003:
H:\Мои документы\Прочие файлы\проекты AVR\visualizer-sweep\List\Lab5.asm(1009): warning: .cseg .db misalignment - padding zero byte
000018 0001      	.DB  0x1
                 _0x60004:
000019 1e78      	.DB  0x78,0x1E
                 _0x60016:
00001a 0000
00001b 0000
00001c 0000
00001d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 
                 __GLOBAL_INI_TBL:
00001e 0001      	.DW  0x01
00001f 0003      	.DW  0x03
000020 002e      	.DW  _0x7*2
                 
000021 0001      	.DW  0x01
000022 0080      	.DW  _dir_counter
000023 0030      	.DW  _0x60003*2
                 
000024 0002      	.DW  0x02
000025 0091      	.DW  _period
000026 0032      	.DW  _0x60004*2
                 
000027 0008      	.DW  0x08
000028 0002      	.DW  0x02
000029 0034      	.DW  _0x60016*2
                 
                 _0xFFFFFFFF:
00002a 0000      	.DW  0
                 
                 __RESET:
00002b 94f8      	CLI
00002c 27ee      	CLR  R30
00002d bbec      	OUT  EECR,R30
00002e bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00002f e1f8      	LDI  R31,0x18
000030 b7a4      	IN   R26,MCUSR
000031 7fa7      	CBR  R26,8
000032 bfa4      	OUT  MCUSR,R26
000033 bdf1      	OUT  WDTCR,R31
000034 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000035 e08d      	LDI  R24,(14-2)+1
000036 e0a2      	LDI  R26,2
                 __CLEAR_REG:
000037 93ed      	ST   X+,R30
000038 958a      	DEC  R24
000039 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00003a e880      	LDI  R24,__CLEAR_SRAM_SIZE
00003b e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00003c 93ed      	ST   X+,R30
00003d 958a      	DEC  R24
00003e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00003f e3ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000040 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000041 9185      	LPM  R24,Z+
000042 9195      	LPM  R25,Z+
000043 9700      	SBIW R24,0
000044 f061      	BREQ __GLOBAL_INI_END
000045 91a5      	LPM  R26,Z+
000046 91b5      	LPM  R27,Z+
000047 9005      	LPM  R0,Z+
000048 9015      	LPM  R1,Z+
000049 01bf      	MOVW R22,R30
00004a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00004b 9005      	LPM  R0,Z+
00004c 920d      	ST   X+,R0
00004d 9701      	SBIW R24,1
00004e f7e1      	BRNE __GLOBAL_INI_LOOP
00004f 01fb      	MOVW R30,R22
000050 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION
000051 e0e0      	LDI  R30,__GPIOR0_INIT
000052 bbe3      	OUT  GPIOR0,R30
                 	;__GPIOR1_INIT = __GPIOR0_INIT
000053 bbe4      	OUT  GPIOR1,R30
                 	;__GPIOR2_INIT = __GPIOR0_INIT
000054 bbe5      	OUT  GPIOR2,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000055 edef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000056 bfed      	OUT  SPL,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000057 e8c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
                 
000058 c000      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x80
                 
                 	.CSEG
                 ;#include <sweep.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x50
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_standby=0x40
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;eeprom int x=0;
                 ;char next_symbol=0;
                 ;
                 ;void main(void)
                 ; 0000 0007 {
                 
                 	.CSEG
                 _main:
                 ; 0000 0008     #asm("sei")      //set enable interrupts
000059 9478      	sei
                 ; 0000 0009     sweep_init();
00005a d096      	RCALL _sweep_init
                 ; 0000 000A     while(1)
                 _0x3:
                 ; 0000 000B     {
                 ; 0000 000C         try_update();
00005b d162      	RCALL _try_update
                 ; 0000 000D         #asm("sleep")
00005c 9588      	sleep
                 ; 0000 000E         #asm("nop")
00005d 0000      	nop
                 ; 0000 000F     }
00005e cffc      	RJMP _0x3
                 _0x5:
                 ; 0000 0010     x=0;
00005f e0a0      	LDI  R26,LOW(_x)
000060 e0b0      	LDI  R27,HIGH(_x)
000061 e0e0      	LDI  R30,LOW(0)
000062 e0f0      	LDI  R31,HIGH(0)
000063 d1ff      	RCALL __EEPROMWRW
                 ; 0000 0011 }
                 _0x6:
000064 cfff      	RJMP _0x6
                 ;#include<progI2C.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;
                 ;void I2C_init()
                 ; 0001 0005 {
                 
                 	.CSEG
                 _I2C_init:
                 ; 0001 0006     ACCDDR |= (1<<ACCPOWER)|(1<<SCL)|(1<<SDA);   //SDA,SCL,POWER set out
000065 b3e1      	IN   R30,0x11
000066 60e7      	ORI  R30,LOW(0x7)
000067 bbe1      	OUT  0x11,R30
                 ; 0001 0007     ACCPORT |= (1<<ACCPOWER)|(1<<SCL)|(1<<SDA);  //SDA,SCL,POWER set 1
000068 b3e2      	IN   R30,0x12
000069 60e7      	ORI  R30,LOW(0x7)
00006a bbe2      	OUT  0x12,R30
                 ; 0001 0008 }
00006b 9508      	RET
                 ;
                 ;void send_start()
                 ; 0001 000B {
                 _send_start:
                 ; 0001 000C     ACCDDR |= (1<<SDA);         //SDA set out
00006c 9a88      	SBI  0x11,0
                 ; 0001 000D     ACCPORT |= (1<<SDA);        //SDA=1
00006d 9a90      	SBI  0x12,0
                 ; 0001 000E     ACCPORT |= (1<<SCL);        //SCL=1
00006e 9a91      	SBI  0x12,1
                 ; 0001 000F     ACCPORT &= ~(1<<SDA);       //SDA=0
00006f d18a      	RCALL SUBOPT_0x0
                 ; 0001 0010     delay_us(hold_time);
                 ; 0001 0011 }
000070 9508      	RET
                 ;
                 ;void repeat_start()
                 ; 0001 0014 {
                 _repeat_start:
                 ; 0001 0015     ACCDDR |= (1<<SDA);         //SDA set out
000071 9a88      	SBI  0x11,0
                 ; 0001 0016     ACCPORT |= (1<<SDA);        //SDA=1
000072 9a90      	SBI  0x12,0
                 ; 0001 0017     ACCPORT |= (1<<SCL);        //SCL=1
000073 d18b      	RCALL SUBOPT_0x1
                 ; 0001 0018     delay_us(clock_hight);
                 ; 0001 0019     ACCPORT &= ~(1<<SDA);       //SDA=0
000074 d185      	RCALL SUBOPT_0x0
                 ; 0001 001A     delay_us(hold_time);
                 ; 0001 001B }
000075 9508      	RET
                 ;
                 ;void send_byte(char message)
                 ; 0001 001E {
                 _send_byte:
                 ; 0001 001F     char i;
                 ; 0001 0020     char mask=0b10000000;
                 ; 0001 0021     ACCDDR |= (1<<SDA);         //SDA set out
000076 d204      	RCALL __SAVELOCR2
                 ;	message -> Y+2
                 ;	i -> R17
                 ;	mask -> R16
000077 e800      	LDI  R16,128
000078 9a88      	SBI  0x11,0
                 ; 0001 0022     ACCPORT &= ~(1<<SCL);       //SCL=0
000079 9891      	CBI  0x12,1
                 ; 0001 0023     delay_us(clock_low);
                +
00007a e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00007b 958a     +DEC R24
00007c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
                 ; 0001 0024     for(i=0;i<8;i++)
00007d e010      	LDI  R17,LOW(0)
                 _0x20004:
00007e 3018      	CPI  R17,8
00007f f008      	BRLO PC+2
000080 c00d      	RJMP _0x20005
                 ; 0001 0025     {
                 ; 0001 0026         if(message&mask)
000081 2fe0      	MOV  R30,R16
000082 81aa      	LDD  R26,Y+2
000083 23ea      	AND  R30,R26
000084 f409      	BRNE PC+2
000085 c002      	RJMP _0x20006
                 ; 0001 0027             ACCPORT |= (1<<SDA); //SDA=1
000086 9a90      	SBI  0x12,0
                 ; 0001 0028         else
000087 c001      	RJMP _0x20007
                 _0x20006:
                 ; 0001 0029             ACCPORT &= ~(1<<SDA);//SDA=0
000088 9890      	CBI  0x12,0
                 ; 0001 002A         mask=mask>>1;       //enough time for setup
                 _0x20007:
000089 9506      	LSR  R16
                 ; 0001 002B         //delay_us(setup_time);
                 ; 0001 002C         ACCPORT |= (1<<SCL);    //SCL=1
00008a d174      	RCALL SUBOPT_0x1
                 ; 0001 002D         delay_us(clock_hight);
                 ; 0001 002E         ACCPORT &= ~(1<<SCL);   //SCL=0
00008b d178      	RCALL SUBOPT_0x2
                 ; 0001 002F         delay_us(hold_time);
                 ; 0001 0030     }
                 _0x20003:
00008c 5f1f      	SUBI R17,-1
00008d cff0      	RJMP _0x20004
                 _0x20005:
                 ; 0001 0031     get_sak();
00008e d015      	RCALL _get_sak
                 ; 0001 0032 }
00008f d1ee      	RCALL __LOADLOCR2
000090 9623      	ADIW R28,3
000091 9508      	RET
                 ;
                 ;char get_byte()
                 ; 0001 0035 {
                 _get_byte:
                 ; 0001 0036     char i,temp=0x00;
                 ; 0001 0037     ACCPORT &= ~(1<<SCL);       //SCL=0
000092 d1e8      	RCALL __SAVELOCR2
                 ;	i -> R17
                 ;	temp -> R16
000093 e000      	LDI  R16,0
000094 9891      	CBI  0x12,1
                 ; 0001 0038     ACCDDR &= ~(1<<SDA);        //SDA set in
000095 9888      	CBI  0x11,0
                 ; 0001 0039     for(i=0;i<8;i++)
000096 e010      	LDI  R17,LOW(0)
                 _0x20009:
000097 3018      	CPI  R17,8
000098 f008      	BRLO PC+2
000099 c007      	RJMP _0x2000A
                 ; 0001 003A     {
                 ; 0001 003B         ACCPORT |= (1<<SCL);        //SCL=1
00009a 9a91      	SBI  0x12,1
                 ; 0001 003C         temp = temp<<1;
00009b 0f00      	LSL  R16
                 ; 0001 003D         delay_us(setup_time);
00009c d16c      	RCALL SUBOPT_0x3
                 ; 0001 003E         temp |= ACCPIN&(1<<SDA);
00009d 2b0e      	OR   R16,R30
                 ; 0001 003F         ACCPORT &= ~(1<<SCL);       //SCL=0
00009e d165      	RCALL SUBOPT_0x2
                 ; 0001 0040         delay_us(hold_time);
                 ; 0001 0041     }
                 _0x20008:
00009f 5f1f      	SUBI R17,-1
0000a0 cff6      	RJMP _0x20009
                 _0x2000A:
                 ; 0001 0042     return temp;
0000a1 2fe0      	MOV  R30,R16
0000a2 d1de      	RCALL __LOADLOCR2P
0000a3 9508      	RET
                 ; 0001 0043 }
                 ;
                 ;char get_sak()
                 ; 0001 0046 {
                 _get_sak:
                 ; 0001 0047     char temp;
                 ; 0001 0048     ACCPORT &= ~(1<<SCL);       //SCL=0
0000a4 931a      	ST   -Y,R17
                 ;	temp -> R17
0000a5 9891      	CBI  0x12,1
                 ; 0001 0049     ACCDDR &= ~(1<<SDA);        //SDA set in
0000a6 9888      	CBI  0x11,0
                 ; 0001 004A     ACCPORT |= (1<<SDA);        //SDA=1  line supporter
0000a7 9a90      	SBI  0x12,0
                 ; 0001 004B     ACCPORT |= (1<<SCL);        //SCL=1
0000a8 9a91      	SBI  0x12,1
                 ; 0001 004C     delay_us(setup_time);
0000a9 d15f      	RCALL SUBOPT_0x3
                 ; 0001 004D     temp=ACCPIN&(1<<SDA);
0000aa 2f1e      	MOV  R17,R30
                 ; 0001 004E     ACCPORT &= ~(1<<SCL);       //SCL=0
0000ab d158      	RCALL SUBOPT_0x2
                 ; 0001 004F     delay_us(hold_time);
                 ; 0001 0050     return temp;
0000ac 2fe1      	MOV  R30,R17
0000ad 9119      	LD   R17,Y+
0000ae 9508      	RET
                 ; 0001 0051 }
                 ;
                 ;void send_mak(char mode)
                 ; 0001 0054 {
                 _send_mak:
                 ; 0001 0055     ACCDDR |= (1<<SDA);         //SDA set out
                 ;	mode -> Y+0
0000af 9a88      	SBI  0x11,0
                 ; 0001 0056     ACCPORT &= ~(1<<SCL);       //SCL=0
0000b0 9891      	CBI  0x12,1
                 ; 0001 0057         if(mode)
0000b1 81e8      	LD   R30,Y
0000b2 30e0      	CPI  R30,0
0000b3 f409      	BRNE PC+2
0000b4 c002      	RJMP _0x2000B
                 ; 0001 0058             ACCPORT |= (1<<SDA); //SDA=1
0000b5 9a90      	SBI  0x12,0
                 ; 0001 0059         else
0000b6 c001      	RJMP _0x2000C
                 _0x2000B:
                 ; 0001 005A             ACCPORT &= ~(1<<SDA);//SDA=0
0000b7 9890      	CBI  0x12,0
                 ; 0001 005B     delay_us(setup_time);
                 _0x2000C:
                +
0000b8 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
0000b9 958a     +DEC R24
0000ba f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0001 005C     ACCPORT |= (1<<SCL);    //SCL=1
0000bb d143      	RCALL SUBOPT_0x1
                 ; 0001 005D     delay_us(clock_hight);
                 ; 0001 005E     ACCPORT &= ~(1<<SCL);   //SCL=0
0000bc d147      	RCALL SUBOPT_0x2
                 ; 0001 005F     delay_us(hold_time);
                 ; 0001 0060 }
0000bd 9621      	ADIW R28,1
0000be 9508      	RET
                 ;
                 ;void send_stop()
                 ; 0001 0063 {
                 _send_stop:
                 ; 0001 0064     ACCDDR |= (1<<SDA);         //SDA set out
0000bf 9a88      	SBI  0x11,0
                 ; 0001 0065     ACCPORT &= ~(1<<SDA);       //SDA=0
0000c0 9890      	CBI  0x12,0
                 ; 0001 0066     ACCPORT |= (1<<SCL);        //SCL=1
0000c1 9a91      	SBI  0x12,1
                 ; 0001 0067     delay_us(setup_time);
                +
0000c2 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
0000c3 958a     +DEC R24
0000c4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0001 0068     ACCPORT |= (1<<SDA);        //SDA=1
0000c5 9a90      	SBI  0x12,0
                 ; 0001 0069     delay_us(clock_hight);
                +
0000c6 e08b     +LDI R24 , LOW ( 11 )
                +__DELAY_USB_LOOP :
0000c7 958a     +DEC R24
0000c8 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 11
                 ; 0001 006A }
0000c9 9508      	RET
                 ;#include <lis331dl.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;char get_at_address(char reg_addr)
                 ; 0002 0004 {
                 
                 	.CSEG
                 _get_at_address:
                 ; 0002 0005     char temp;
                 ; 0002 0006     send_start();
0000ca 931a      	ST   -Y,R17
                 ;	reg_addr -> Y+1
                 ;	temp -> R17
0000cb d143      	RCALL SUBOPT_0x4
                 ; 0002 0007     send_byte(address<<1);
                 ; 0002 0008     send_byte(reg_addr);
                 ; 0002 0009     repeat_start();
0000cc dfa4      	RCALL _repeat_start
                 ; 0002 000A     send_byte((address<<1)+1);
0000cd e3eb      	LDI  R30,LOW(59)
0000ce 93ea      	ST   -Y,R30
0000cf dfa6      	RCALL _send_byte
                 ; 0002 000B     temp=get_byte();
0000d0 dfc1      	RCALL _get_byte
0000d1 2f1e      	MOV  R17,R30
                 ; 0002 000C     send_mak(1);
0000d2 e0e1      	LDI  R30,LOW(1)
0000d3 93ea      	ST   -Y,R30
0000d4 dfda      	RCALL _send_mak
                 ; 0002 000D     send_stop();
0000d5 dfe9      	RCALL _send_stop
                 ; 0002 000E     return temp;
0000d6 2fe1      	MOV  R30,R17
0000d7 8118      	LDD  R17,Y+0
0000d8 9622      	ADIW R28,2
0000d9 9508      	RET
                 ; 0002 000F }
                 ;
                 ;void set_at_address(char reg_addr, char data)
                 ; 0002 0012 {
                 _set_at_address:
                 ; 0002 0013     send_start();
                 ;	reg_addr -> Y+1
                 ;	data -> Y+0
0000da d134      	RCALL SUBOPT_0x4
                 ; 0002 0014     send_byte(address<<1);
                 ; 0002 0015     send_byte(reg_addr);
                 ; 0002 0016     send_byte(data);
0000db 81e8      	LD   R30,Y
0000dc 93ea      	ST   -Y,R30
0000dd df98      	RCALL _send_byte
                 ; 0002 0017     send_stop();
0000de dfe0      	RCALL _send_stop
                 ; 0002 0018 }
0000df 9622      	ADIW R28,2
0000e0 9508      	RET
                 ;
                 ;void acc_init()
                 ; 0002 001B {
                 _acc_init:
                 ; 0002 001C     I2C_init();
0000e1 df83      	RCALL _I2C_init
                 ; 0002 001D     delay_ms(10);
0000e2 e0ea      	LDI  R30,LOW(10)
0000e3 e0f0      	LDI  R31,HIGH(10)
0000e4 93fa      	ST   -Y,R31
0000e5 93ea      	ST   -Y,R30
0000e6 d152      	RCALL _delay_ms
                 ; 0002 001E     set_at_address(CTRL_REG1,0b11100111); //set DR, PD, FS, Zen, Yen, Xen
0000e7 e2e0      	LDI  R30,LOW(32)
0000e8 93ea      	ST   -Y,R30
0000e9 eee7      	LDI  R30,LOW(231)
0000ea 93ea      	ST   -Y,R30
0000eb dfee      	RCALL _set_at_address
                 ; 0002 001F }
0000ec 9508      	RET
                 ;
                 ;signed char get_X()
                 ; 0002 0022 {
                 ; 0002 0023     return get_at_address(OUT_X);
                 ; 0002 0024 }
                 ;signed char get_Y()
                 ; 0002 0026 {
                 _get_Y:
                 ; 0002 0027     return get_at_address(OUT_Y);
0000ed e2eb      	LDI  R30,LOW(43)
0000ee 93ea      	ST   -Y,R30
0000ef dfda      	RCALL _get_at_address
0000f0 9508      	RET
                 ; 0002 0028 }
                 ;/*
                 ;signed char get_Z()
                 ;{
                 ;    return get_at_address(OUT_Z);
                 ;}
                 ;
                 ;axis_values get_axis_values()
                 ;{
                 ;    axis_values temp;
                 ;    temp.X=get_at_address(OUT_X);
                 ;    temp.Y=get_at_address(OUT_Y);
                 ;    temp.Z=get_at_address(OUT_Z);
                 ;    return temp;
                 ;}  */
                 ;#include <sweep.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;__flash char Frame[]={0xf0,0x88,0x8c,0x88,0xf0,0x88,0x88,0xf0}; //symbol B //{0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};//{0x86,0x86,0xfe,0x86,0x86,0x86,0x7e,0x00}; //symbol A
                 ;
                 ;extern char next_symbol;
                 ;
                 ;char line_pointer=0;
                 ;char dir=0;                 //0-up 1-down
                 ;
                 ;char enable_update=0;               //permission to update the acceleration data
                 ;char enable_check=0;                //permission to processing acceleration data
                 ;unsigned int last_inf_time=0;
                 ;signed char last_value=0;
                 ;int last_time,more_last_time;
                 ;char dir_counter=1;  //0 - negative direction=1; 2 - positive direction=0;
                 
                 	.DSEG
                 ;
                 ;unsigned int periods_arr[8];
                 ;unsigned int period=7800;   //time of one swing
                 ;
                 ;void sweep_init()
                 ; 0003 0015 {
                 
                 	.CSEG
                 _sweep_init:
                 ; 0003 0016     acc_init();
0000f1 dfef      	RCALL _acc_init
                 ; 0003 0017     DDRB=0xff;              //set output portB
0000f2 efef      	LDI  R30,LOW(255)
0000f3 bbe7      	OUT  0x17,R30
                 ; 0003 0018     set_periods();
0000f4 d02a      	RCALL _set_periods
                 ; 0003 0019     TCCR0B |=(1<<CS02);     //set prescale 256 on TIMER0
0000f5 b7e3      	IN   R30,0x33
0000f6 60e4      	ORI  R30,4
0000f7 bfe3      	OUT  0x33,R30
                 ; 0003 001A     TCCR1B |=(1<<CS12);     //set prescale 256 on TIMER1
0000f8 b5ee      	IN   R30,0x2E
0000f9 60e4      	ORI  R30,4
0000fa bdee      	OUT  0x2E,R30
                 ; 0003 001B     TIMSK |=(1<<OCIE1A)|(1<<OCIE1B)|(1<<TOIE1)|(1<<TOIE0);     //set enable Compare A/B Match interrupts on TIMER1 and Overflows
0000fb b7e9      	IN   R30,0x39
0000fc 6ee2      	ORI  R30,LOW(0xE2)
0000fd bfe9      	OUT  0x39,R30
                 ; 0003 001C 
                 ; 0003 001D     OCR0A=128;
0000fe e8e0      	LDI  R30,LOW(128)
0000ff bfe6      	OUT  0x36,R30
                 ; 0003 001E     OCR1A=TCNT1+period;
000100 b5ec      	IN   R30,0x2C
000101 b5fd      	IN   R31,0x2C+1
000102 d113      	RCALL SUBOPT_0x5
000103 d117      	RCALL SUBOPT_0x6
                 ; 0003 001F     set_line();
                 ; 0003 0020 }
000104 9508      	RET
                 ;
                 ;void set_line()
                 ; 0003 0023 {
                 _set_line:
                 ; 0003 0024     if(dir)
000105 2055      	TST  R5
000106 f409      	BRNE PC+2
000107 c004      	RJMP _0x60005
                 ; 0003 0025         FRAMEPORT=Frame[7-line_pointer];          //set output line
000108 e0e7      	LDI  R30,LOW(7)
000109 19e2      	SUB  R30,R2
00010a d115      	RCALL SUBOPT_0x7
                 ; 0003 0026     else
00010b c002      	RJMP _0x60006
                 _0x60005:
                 ; 0003 0027         FRAMEPORT=Frame[line_pointer];
00010c 2de2      	MOV  R30,R2
00010d d112      	RCALL SUBOPT_0x7
                 ; 0003 0028     OCR1B=TCNT1+periods_arr[line_pointer];      //set time for line
                 _0x60006:
                +
00010e b40c     +IN R0 , 44
00010f b41d     +IN R1 , 44 + 1
                 	__INWR 0,1,44
000110 2de2      	MOV  R30,R2
000111 e8a1      	LDI  R26,LOW(_periods_arr)
000112 0fee      	LSL  R30
000113 0fae      	ADD  R26,R30
000114 d14a      	RCALL __GETW1P
000115 0de0      	ADD  R30,R0
000116 1df1      	ADC  R31,R1
000117 bdf9      	OUT  0x28+1,R31
000118 bde8      	OUT  0x28,R30
                 ; 0003 0029     if(line_pointer<7) line_pointer++;
000119 e0e7      	LDI  R30,LOW(7)
00011a 162e      	CP   R2,R30
00011b f008      	BRLO PC+2
00011c c001      	RJMP _0x60007
00011d 9423      	INC  R2
                 ; 0003 002A }
                 _0x60007:
00011e 9508      	RET
                 ;
                 ;void set_periods()     //set periods of lines
                 ; 0003 002D {
                 _set_periods:
                 ; 0003 002E     periods_arr[0]=(period/(int)4-period/(int)50);      //23%
00011f d106      	RCALL SUBOPT_0x8
000120 d126      	RCALL __LSRW2
000121 d109      	RCALL SUBOPT_0x9
000122 01db      	MOVW R26,R22
000123 1bae      	SUB  R26,R30
000124 0bbf      	SBC  R27,R31
000125 93a0 0081 	STS  _periods_arr,R26
000127 93b0 0082 	STS  _periods_arr+1,R27
                 ; 0003 002F     periods_arr[1]=(period/(int)8-period/(int)50);      //10,5%
000129 d0fc      	RCALL SUBOPT_0x8
00012a d11a      	RCALL __LSRW3
00012b d0ff      	RCALL SUBOPT_0x9
00012c d104      	RCALL SUBOPT_0xA
                +
00012d 93e0 0083+STS _periods_arr + ( 2 ) , R30
00012f 93f0 0084+STS _periods_arr + ( 2 ) + 1 , R31
                 	__PUTW1MN _periods_arr,2
                 ; 0003 0030     periods_arr[2]=(period/(int)11-period/(int)200);    //8,6%
000131 d0e4      	RCALL SUBOPT_0x5
000132 e0eb      	LDI  R30,LOW(11)
000133 e0f0      	LDI  R31,HIGH(11)
000134 d117      	RCALL __DIVW21U
000135 01bf      	MOVW R22,R30
000136 d0df      	RCALL SUBOPT_0x5
000137 ece8      	LDI  R30,LOW(200)
000138 e0f0      	LDI  R31,HIGH(200)
000139 d112      	RCALL __DIVW21U
00013a d0f6      	RCALL SUBOPT_0xA
                +
00013b 93e0 0085+STS _periods_arr + ( 4 ) , R30
00013d 93f0 0086+STS _periods_arr + ( 4 ) + 1 , R31
                 	__PUTW1MN _periods_arr,4
                 ; 0003 0031     periods_arr[3]=(period/(int)12-period/(int)300);    //8%
00013f d0d6      	RCALL SUBOPT_0x5
000140 e0ec      	LDI  R30,LOW(12)
000141 e0f0      	LDI  R31,HIGH(12)
000142 d109      	RCALL __DIVW21U
000143 01bf      	MOVW R22,R30
000144 d0d1      	RCALL SUBOPT_0x5
000145 e2ec      	LDI  R30,LOW(300)
000146 e0f1      	LDI  R31,HIGH(300)
000147 d104      	RCALL __DIVW21U
000148 d0e8      	RCALL SUBOPT_0xA
                +
000149 93e0 0087+STS _periods_arr + ( 6 ) , R30
00014b 93f0 0088+STS _periods_arr + ( 6 ) + 1 , R31
                 	__PUTW1MN _periods_arr,6
                 ; 0003 0032     periods_arr[4]=periods_arr[3];
                +
00014d 91e0 0087+LDS R30 , _periods_arr + ( 6 )
00014f 91f0 0088+LDS R31 , _periods_arr + ( 6 ) + 1
                 	__GETW1MN _periods_arr,6
                +
000151 93e0 0089+STS _periods_arr + ( 8 ) , R30
000153 93f0 008a+STS _periods_arr + ( 8 ) + 1 , R31
                 	__PUTW1MN _periods_arr,8
                 ; 0003 0033     periods_arr[5]=periods_arr[2];
                +
000155 91e0 0085+LDS R30 , _periods_arr + ( 4 )
000157 91f0 0086+LDS R31 , _periods_arr + ( 4 ) + 1
                 	__GETW1MN _periods_arr,4
                +
000159 93e0 008b+STS _periods_arr + ( 10 ) , R30
00015b 93f0 008c+STS _periods_arr + ( 10 ) + 1 , R31
                 	__PUTW1MN _periods_arr,10
                 ; 0003 0034     periods_arr[6]=periods_arr[1];
                +
00015d 91e0 0083+LDS R30 , _periods_arr + ( 2 )
00015f 91f0 0084+LDS R31 , _periods_arr + ( 2 ) + 1
                 	__GETW1MN _periods_arr,2
                +
000161 93e0 008d+STS _periods_arr + ( 12 ) , R30
000163 93f0 008e+STS _periods_arr + ( 12 ) + 1 , R31
                 	__PUTW1MN _periods_arr,12
                 ; 0003 0035     periods_arr[7]=period;
000165 d0c0      	RCALL SUBOPT_0x8
                +
000166 93e0 008f+STS _periods_arr + ( 14 ) , R30
000168 93f0 0090+STS _periods_arr + ( 14 ) + 1 , R31
                 	__PUTW1MN _periods_arr,14
                 ; 0003 0036 }
00016a 9508      	RET
                 ;
                 ;void set_new_swing()
                 ; 0003 0039 {
                 _set_new_swing:
                 ; 0003 003A     period=more_last_time-last_inf_time;
00016b 01f6      	MOVW R30,R12
00016c 19e8      	SUB  R30,R8
00016d 09f9      	SBC  R31,R9
00016e 93e0 0091 	STS  _period,R30
000170 93f0 0092 	STS  _period+1,R31
                 ; 0003 003B     set_periods();
000172 dfac      	RCALL _set_periods
                 ; 0003 003C     enable_check=0;
000173 2477      	CLR  R7
                 ; 0003 003D     line_pointer=0;
000174 2422      	CLR  R2
                 ; 0003 003E     TCNT1=more_last_time; //back to the past: set inf time
                +
000175 bcdd     +OUT 44 + 1 , R13
000176 bccc     +OUT 44 , R12
                 	__OUTWR 12,13,44
                 ; 0003 003F     last_inf_time=TCNT1;
                +
000177 b48c     +IN R8 , 44
000178 b49d     +IN R9 , 44 + 1
                 	__INWR 8,9,44
                 ; 0003 0040     OCR1A=TCNT1+period/2;
000179 b5ec      	IN   R30,0x2C
00017a b5fd      	IN   R31,0x2C+1
00017b 01df      	MOVW R26,R30
00017c d0a9      	RCALL SUBOPT_0x8
00017d 95f6      	LSR  R31
00017e 95e7      	ROR  R30
00017f d09b      	RCALL SUBOPT_0x6
                 ; 0003 0041     set_line();
                 ; 0003 0042 }
000180 9508      	RET
                 ;
                 ;int check_inf(signed char value)
                 ; 0003 0045 {
                 _check_inf:
                 ; 0003 0046     if((value>last_value)&&(dir_counter<2))     dir_counter++;  //value rising -> dir_counter++
                 ;	value -> Y+0
000181 81a8      	LD   R26,Y
000182 166a      	CP   R6,R26
000183 f00c      	BRLT PC+2
000184 c005      	RJMP _0x60009
000185 d0b0      	RCALL SUBOPT_0xB
000186 30a2      	CPI  R26,LOW(0x2)
000187 f008      	BRLO PC+2
000188 c001      	RJMP _0x60009
000189 c001      	RJMP _0x6000A
                 _0x60009:
00018a c005      	RJMP _0x60008
                 _0x6000A:
00018b 91e0 0080 	LDS  R30,_dir_counter
00018d 5fef      	SUBI R30,-LOW(1)
00018e 93e0 0080 	STS  _dir_counter,R30
                 ; 0003 0047     if((value<last_value)&&(dir_counter>0))     dir_counter--;  //value falling -> dir_counter--
                 _0x60008:
000190 81a8      	LD   R26,Y
000191 15a6      	CP   R26,R6
000192 f00c      	BRLT PC+2
000193 c005      	RJMP _0x6000C
000194 d0a1      	RCALL SUBOPT_0xB
000195 30a1      	CPI  R26,LOW(0x1)
000196 f408      	BRSH PC+2
000197 c001      	RJMP _0x6000C
000198 c001      	RJMP _0x6000D
                 _0x6000C:
000199 c005      	RJMP _0x6000B
                 _0x6000D:
00019a 91e0 0080 	LDS  R30,_dir_counter
00019c 50e1      	SUBI R30,LOW(1)
00019d 93e0 0080 	STS  _dir_counter,R30
                 ; 0003 0048 
                 ; 0003 0049     if(dir)
                 _0x6000B:
00019f 2055      	TST  R5
0001a0 f409      	BRNE PC+2
0001a1 c00a      	RJMP _0x6000E
                 ; 0003 004A     {
                 ; 0003 004B         if(dir_counter>1)
0001a2 d093      	RCALL SUBOPT_0xB
0001a3 30a2      	CPI  R26,LOW(0x2)
0001a4 f408      	BRSH PC+2
0001a5 c005      	RJMP _0x6000F
                 ; 0003 004C         {
                 ; 0003 004D             dir=0;      //change direction
0001a6 2455      	CLR  R5
                 ; 0003 004E             return 1;
0001a7 e0e1      	LDI  R30,LOW(1)
0001a8 e0f0      	LDI  R31,HIGH(1)
0001a9 9621      	ADIW R28,1
0001aa 9508      	RET
                 ; 0003 004F         }
                 ; 0003 0050     }
                 _0x6000F:
                 ; 0003 0051     else
0001ab c00a      	RJMP _0x60010
                 _0x6000E:
                 ; 0003 0052     {
                 ; 0003 0053         if(dir_counter<1)
0001ac d089      	RCALL SUBOPT_0xB
0001ad 30a1      	CPI  R26,LOW(0x1)
0001ae f008      	BRLO PC+2
0001af c006      	RJMP _0x60011
                 ; 0003 0054         {
                 ; 0003 0055             dir=1;      //change direction
0001b0 e0e1      	LDI  R30,LOW(1)
0001b1 2e5e      	MOV  R5,R30
                 ; 0003 0056             return 1;
0001b2 e0e1      	LDI  R30,LOW(1)
0001b3 e0f0      	LDI  R31,HIGH(1)
0001b4 9621      	ADIW R28,1
0001b5 9508      	RET
                 ; 0003 0057         }
                 ; 0003 0058     }
                 _0x60011:
                 _0x60010:
                 ; 0003 0059     last_value=value;
0001b6 8068      	LDD  R6,Y+0
                 ; 0003 005A     more_last_time=last_time;
0001b7 0165      	MOVW R12,R10
                 ; 0003 005B     last_time=TCNT1;
                +
0001b8 b4ac     +IN R10 , 44
0001b9 b4bd     +IN R11 , 44 + 1
                 	__INWR 10,11,44
                 ; 0003 005C     return 0;
0001ba e0e0      	LDI  R30,LOW(0)
0001bb e0f0      	LDI  R31,HIGH(0)
0001bc 9621      	ADIW R28,1
0001bd 9508      	RET
                 ; 0003 005D }
                 ;
                 ;void try_update()
                 ; 0003 0060 {
                 _try_update:
                 ; 0003 0061     if(enable_update&&enable_check)
0001be 2044      	TST  R4
0001bf f409      	BRNE PC+2
0001c0 c004      	RJMP _0x60013
0001c1 2077      	TST  R7
0001c2 f409      	BRNE PC+2
0001c3 c001      	RJMP _0x60013
0001c4 c001      	RJMP _0x60014
                 _0x60013:
0001c5 c008      	RJMP _0x60012
                 _0x60014:
                 ; 0003 0062     {
                 ; 0003 0063         enable_update=0;
0001c6 2444      	CLR  R4
                 ; 0003 0064         if(check_inf(get_Y()))
0001c7 df25      	RCALL _get_Y
0001c8 93ea      	ST   -Y,R30
0001c9 dfb7      	RCALL _check_inf
0001ca 9730      	SBIW R30,0
0001cb f409      	BRNE PC+2
0001cc c001      	RJMP _0x60015
                 ; 0003 0065             set_new_swing();
0001cd df9d      	RCALL _set_new_swing
                 ; 0003 0066     }
                 _0x60015:
                 ; 0003 0067 }
                 _0x60012:
0001ce 9508      	RET
                 ;
                 ;interrupt [TIM1_COMPA] void period_overflow(void)
                 ; 0003 006A {
                 _period_overflow:
0001cf 93ea      	ST   -Y,R30
                 ; 0003 006B     enable_check=1;
0001d0 e0e1      	LDI  R30,LOW(1)
0001d1 2e7e      	MOV  R7,R30
                 ; 0003 006C }
0001d2 91e9      	LD   R30,Y+
0001d3 9518      	RETI
                 ;
                 ;interrupt [TIM1_COMPB] void line_overflow(void)
                 ; 0003 006F {
                 _line_overflow:
0001d4 920a      	ST   -Y,R0
0001d5 921a      	ST   -Y,R1
0001d6 92fa      	ST   -Y,R15
0001d7 936a      	ST   -Y,R22
0001d8 937a      	ST   -Y,R23
0001d9 938a      	ST   -Y,R24
0001da 939a      	ST   -Y,R25
0001db 93aa      	ST   -Y,R26
0001dc 93ba      	ST   -Y,R27
0001dd 93ea      	ST   -Y,R30
0001de 93fa      	ST   -Y,R31
0001df b7ef      	IN   R30,SREG
0001e0 93ea      	ST   -Y,R30
                 ; 0003 0070     set_line();
0001e1 df23      	RCALL _set_line
                 ; 0003 0071 }
0001e2 91e9      	LD   R30,Y+
0001e3 bfef      	OUT  SREG,R30
0001e4 91f9      	LD   R31,Y+
0001e5 91e9      	LD   R30,Y+
0001e6 91b9      	LD   R27,Y+
0001e7 91a9      	LD   R26,Y+
0001e8 9199      	LD   R25,Y+
0001e9 9189      	LD   R24,Y+
0001ea 9179      	LD   R23,Y+
0001eb 9169      	LD   R22,Y+
0001ec 90f9      	LD   R15,Y+
0001ed 9019      	LD   R1,Y+
0001ee 9009      	LD   R0,Y+
0001ef 9518      	RETI
                 ;
                 ;interrupt [TIM0_OVF] void next_value(void)        //~120 OVF per second
                 ; 0003 0074 {
                 _next_value:
0001f0 93ea      	ST   -Y,R30
                 ; 0003 0075     enable_update=1;
0001f1 e0e1      	LDI  R30,LOW(1)
0001f2 2e4e      	MOV  R4,R30
                 ; 0003 0076 }
0001f3 91e9      	LD   R30,Y+
0001f4 9518      	RETI
                 ;
                 ;interrupt [TIM1_OVF] void next_sym(void)        //~0.5 OVF per second
                 ; 0003 0079 {
                 _next_sym:
0001f5 93ea      	ST   -Y,R30
                 ; 0003 007A     next_symbol=1;
0001f6 e0e1      	LDI  R30,LOW(1)
0001f7 2e3e      	MOV  R3,R30
                 ; 0003 007B }
0001f8 91e9      	LD   R30,Y+
0001f9 9518      	RETI
                 
                 	.ESEG
                 _x:
000000 00 00     	.DW  0x0
                 
                 	.DSEG
                 _dir_counter:
000080           	.BYTE 0x1
                 _periods_arr:
000081           	.BYTE 0x10
                 _period:
000091           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0001fa 9890      	CBI  0x12,0
                +
0001fb e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
0001fc 958a     +DEC R24
0001fd f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
0001fe 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1:
0001ff 9a91      	SBI  0x12,1
                +
000200 e08b     +LDI R24 , LOW ( 11 )
                +__DELAY_USB_LOOP :
000201 958a     +DEC R24
000202 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 11
000203 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2:
000204 9891      	CBI  0x12,1
                +
000205 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
000206 958a     +DEC R24
000207 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
000208 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3:
                +
000209 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
00020a 958a     +DEC R24
00020b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
00020c b3e0      	IN   R30,0x10
00020d 70e1      	ANDI R30,LOW(0x1)
00020e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4:
00020f de5c      	RCALL _send_start
000210 e3ea      	LDI  R30,LOW(58)
000211 93ea      	ST   -Y,R30
000212 de63      	RCALL _send_byte
000213 81e9      	LDD  R30,Y+1
000214 93ea      	ST   -Y,R30
000215 ce60      	RJMP _send_byte
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:16 WORDS
                 SUBOPT_0x5:
000216 91a0 0091 	LDS  R26,_period
000218 91b0 0092 	LDS  R27,_period+1
00021a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x6:
00021b 0fea      	ADD  R30,R26
00021c 1ffb      	ADC  R31,R27
00021d bdfb      	OUT  0x2A+1,R31
00021e bdea      	OUT  0x2A,R30
00021f cee5      	RJMP _set_line
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x7:
000220 e0f0      	LDI  R31,0
000221 5dea      	SUBI R30,LOW(-_Frame*2)
000222 4fff      	SBCI R31,HIGH(-_Frame*2)
000223 9004      	LPM  R0,Z
000224 ba08      	OUT  0x18,R0
000225 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x8:
000226 91e0 0091 	LDS  R30,_period
000228 91f0 0092 	LDS  R31,_period+1
00022a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x9:
00022b 01bf      	MOVW R22,R30
00022c dfe9      	RCALL SUBOPT_0x5
00022d e3e2      	LDI  R30,LOW(50)
00022e e0f0      	LDI  R31,HIGH(50)
00022f d01c      	RCALL __DIVW21U
000230 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xA:
000231 01df      	MOVW R26,R30
000232 01fb      	MOVW R30,R22
000233 1bea      	SUB  R30,R26
000234 0bfb      	SBC  R31,R27
000235 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
000236 91a0 0080 	LDS  R26,_dir_counter
000238 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000239 91e9      	ld   r30,y+
00023a 91f9      	ld   r31,y+
00023b 9630      	adiw r30,0
00023c f039      	breq __delay_ms1
                 __delay_ms0:
                +
00023d ed80     +LDI R24 , LOW ( 0x7D0 )
00023e e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00023f 9701     +SBIW R24 , 1
000240 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000241 95a8      	wdr
000242 9731      	sbiw r30,1
000243 f7c9      	brne __delay_ms0
                 __delay_ms1:
000244 9508      	ret
                 
                 __LSRW3:
000245 95f6      	LSR  R31
000246 95e7      	ROR  R30
                 __LSRW2:
000247 95f6      	LSR  R31
000248 95e7      	ROR  R30
000249 95f6      	LSR  R31
00024a 95e7      	ROR  R30
00024b 9508      	RET
                 
                 __DIVW21U:
00024c 2400      	CLR  R0
00024d 2411      	CLR  R1
00024e e190      	LDI  R25,16
                 __DIVW21U1:
00024f 0faa      	LSL  R26
000250 1fbb      	ROL  R27
000251 1c00      	ROL  R0
000252 1c11      	ROL  R1
000253 1a0e      	SUB  R0,R30
000254 0a1f      	SBC  R1,R31
000255 f418      	BRCC __DIVW21U2
000256 0e0e      	ADD  R0,R30
000257 1e1f      	ADC  R1,R31
000258 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000259 60a1      	SBR  R26,1
                 __DIVW21U3:
00025a 959a      	DEC  R25
00025b f799      	BRNE __DIVW21U1
00025c 01fd      	MOVW R30,R26
00025d 01d0      	MOVW R26,R0
00025e 9508      	RET
                 
                 __GETW1P:
00025f 91ed      	LD   R30,X+
000260 91fc      	LD   R31,X
000261 95aa      	DEC  R26
000262 9508      	RET
                 
                 __EEPROMWRW:
000263 d007      	RCALL __EEPROMWRB
000264 9611      	ADIW R26,1
000265 93ef      	PUSH R30
000266 2fef      	MOV  R30,R31
000267 d003      	RCALL __EEPROMWRB
000268 91ef      	POP  R30
000269 9711      	SBIW R26,1
00026a 9508      	RET
                 
                 __EEPROMWRB:
00026b 9be1      	SBIS EECR,EEWE
00026c c002      	RJMP __EEPROMWRB1
00026d 95a8      	WDR
00026e cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
00026f b79f      	IN   R25,SREG
000270 94f8      	CLI
000271 bbae      	OUT  EEARL,R26
000272 9ae0      	SBI  EECR,EERE
000273 b38d      	IN   R24,EEDR
000274 17e8      	CP   R30,R24
000275 f019      	BREQ __EEPROMWRB0
000276 bbed      	OUT  EEDR,R30
000277 9ae2      	SBI  EECR,EEMWE
000278 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
000279 bf9f      	OUT  SREG,R25
00027a 9508      	RET
                 
                 __SAVELOCR2:
00027b 931a      	ST   -Y,R17
00027c 930a      	ST   -Y,R16
00027d 9508      	RET
                 
                 __LOADLOCR2:
00027e 8119      	LDD  R17,Y+1
00027f 8108      	LD   R16,Y
000280 9508      	RET
                 
                 __LOADLOCR2P:
000281 9109      	LD   R16,Y+
000282 9119      	LD   R17,Y+
000283 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATtiny2313 register use summary:
r0 :  15 r1 :   9 r2 :   6 r3 :   1 r4 :   3 r5 :   4 r6 :   3 r7 :   3 
r8 :   2 r9 :   2 r10:   2 r11:   1 r12:   3 r13:   1 r14:   0 r15:   2 
r16:  10 r17:  17 r18:   0 r19:   0 r20:   0 r21:   0 r22:   9 r23:   2 
r24:  29 r25:   8 r26:  38 r27:  10 r28:   8 r29:   0 r30: 155 r31:  48 
x  :   5 y  :  60 z  :   8 
Registers used: 29 out of 35 (82.9%)

ATtiny2313 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   4 
adiw  :   9 and   :   1 andi  :   1 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   3 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   5 
brlt  :   2 brmi  :   0 brne  :  21 brpl  :   0 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :  11 
cbr   :   1 clc   :   0 clh   :   0 cli   :   2 cln   :   0 clr   :   7 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   4 
cpc   :   0 cpi   :   7 cpse  :   0 dec   :  12 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :  20 
inc   :   1 ld    :  27 ldd   :   5 ldi   :  63 lds   :  13 lpm   :   9 
lsl   :   3 lsr   :   5 mov   :  13 movw  :  14 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   1 or    :   1 ori   :   5 out   :  27 
pop   :   1 push  :   1 rcall :  74 ret   :  39 reti  :   4 rjmp  :  56 
rol   :   3 ror   :   4 sbc   :   4 sbci  :   1 sbi   :  19 sbic  :   0 
sbis  :   1 sbiw  :   6 sbr   :   1 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   1 spm   :   0 st    :  33 std   :   0 
sts   :  20 sub   :   5 subi  :   5 swap  :   0 tst   :   4 wdr   :   2 

Instructions used: 55 out of 114 (48.2%)

ATtiny2313 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000508   1240     48   1288    2048  62.9%
[.dseg] 0x000060 0x000093      0     19     19     223   8.5%
[.eseg] 0x000000 0x000002      0      2      2     128   1.6%

Assembly complete, 0 errors, 11 warnings
